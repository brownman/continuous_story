Users = new Meteor.Collection('users');

Messages = new Meteor.Collection('messages');
ChatStream = new Meteor.Stream('chat');

const SEND_TO_ALL_ID = '_all_';
clfwidget= function clfwidget(commands) {
    var commandsHtml = [];
    for (var i=0; i<Math.min(5, commands.length); ++i) {
        var command = commands[i].command;
        var summary = commands[i].summary;
        var url = commands[i].url;
        commandsHtml.push('<li><a href="'+url+'">'+summary+'</a><br/><code>$ '+command+'</code></li>');
    }
    var listHtml = '<ul>'+commandsHtml.join('')+'</ul>';
    var widgetHtml = listHtml+'<p><a href="http://www.commandlinefu.com">commandlinefu.com</a></p>';
    document.getElementById('commandlinefu_list').innerHTML = widgetHtml;
}
var add_msg = function(message){
    
 var ret=Meteor.call("addMessage", message, function(error, message) {
        /*
         *Session.set("user_id", user_id);
         */
     console.log('add message successfuly');
    });
 console.log(ret);
document.getElementById('message').value = '';
        /*
         *message.value = '';
         */
            /*
             *Messages.insert(message);
             */
}
var me = function() {
	return Session.get('me');
};

var user = function() {
  return me() ? Users.findOne(me().id) : null;
};

Template.join.show = function() {
  return !user();
};

Template.join.users = function() {
	return Users.find();
};

Template.join.events({
	'click button#join': function() {
		var name = $('#lobby input#name').val().trim();
if (name != '') {
		Meteor.call('joinRoom', name, function(error, userId) {
			console.log('My id is: ' + userId);
			Session.set('me', { id: userId, name: name });
			ChatStream.emit('join', name);

			GoofedTTS.speak('Welcome ' + name);
		});
        }
else{

alert('invalid name');
}

	}
});
Template.messages.messages = function () {
  /*
   *return Messages.find({}, { sort: { createdAt: -1 }});
   */


return Messages.find({}, { sort: { time: -1 },  limit: 14 });
  /*
   *return Messages.find({} );
   */

  /*
   *return Messages.find({}, { sort: { createdAt: -1 }},  limit: 20);
   */
}
Template.dashboard.show = function() {
	return user();
};
Template.messages.show = function() {
	return user();
};

Template.dashboard.users = function() {
	return Users.find({_id: { $ne: me().id }});
};

Template.dashboard.me = function() {
	return me();
}

Template.dashboard.events({


 'keydown #dashboard input#message' : function (event) {
    if (event.which == 13) { // 13 is the enter key event


  

		var message = $('#dashboard input#message').val().trim();
	//	var receivers = UI.getReceivers() || SEND_TO_ALL_ID;
//		console.log('[Sending message] to: [' + receivers + ']; message: ' + message);

		if (message) {
          var  obj1={
          message: message,
          name: me().name,
           time: 0
        };
         
           /*
            *Messages.insert(obj1);
            */
          add_msg(obj1);
  
           

		//  ChatStream.emit('message', { from: me().name, to: receivers, message: message });
		}

  }
    },
'click button#send': function() {


		var message = $('#dashboard input#message').val().trim();
		var receivers = UI.getReceivers() || SEND_TO_ALL_ID;
		console.log('[Sending message] to: [' + receivers + ']; message: ' + message);
	
           



	if (message) {

		  ChatStream.emit('message', { from: me().name, to: receivers, message: message });

message='-----' + message
          var  obj1={
          message: message,
          name: me().name,
           time: 0
        };
         
          
add_msg(obj1);

  
		}
}


});

Template.dashboard.rendered = function() {
	UI.synchonizeAllSelected(false);
};

ChatStream.on('message', function(msgObj) {
	if (msgObj.to == SEND_TO_ALL_ID || $.inArray(me().id, msgObj.to) != -1) {
		var message = msgObj.from + ' says: ' + msgObj.message;
		console.log('[Message received] ' + message);
		GoofedTTS.speak(message);
	}
});

ChatStream.on('join', function(name) {
	console.log('[Person joined] ' + name);
	GoofedTTS.speak(name + ' has entered the room');
});

Meteor.startup(function () {
  // send keep alives so the server knows when I leave the room
  Meteor.setInterval(function() {
    if (Meteor.status().connected) {
      Meteor.call('keepalive', me().id);
    }
  }, 20 * 1000);
});
 Template.messages.formatted_date = function(date) {
      var date = new Date(date);
      date.setMinutes(date.getMinutes() - date.getTimezoneOffset());

      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          suffix = "AM";

      if (hours >= 12) {
        suffix = "PM";
        hours -= 12;
      }

      if (hours == 0) {
        hours = 12;
      }

      if (minutes < 10) {
        minutes = "0" + minutes;
      }


          var str=new String(hours + ":" + minutes + " " + suffix);
          return str;
  };
